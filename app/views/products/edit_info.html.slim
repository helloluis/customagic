div id='editor' class='information small-12 small-uncentered medium-12 medium-centered row'
  
  = render :partial => "products/steps"

  div class='inner clearfix medium-12'
    div class='viewer medium-4 small-12'

      div class='item' style='background-image:url(#{@product.final_art.attachment.medium.url}?#{Time.now.to_i})'

      div class='item_specifications'

        dl
          dt 
            strong #{@product.product_type_object.name} Style
          dd = "#{@product.product_style_object.name} (#{@product.product_sub_style_object.name})"
          dt 
            strong Color
          dd 
            = "#{@product.color}"
            span class='color_swatch' style='background-color:#{@product.color}'
          dt
            strong Download Print-Ready Image
          dd
            = link_to truncate(@product.final_art.attachment.url, length:50), @product.final_art.attachment.url, target: "_blank"
    div class='info_form_container medium-4 small-12'

      = simple_form_for @product, :url => update_info_shop_product_path(@current_shop, @product), :method => :post do |f|

        = f.input :name

        = f.input :description, :as => :text

        dl class='base_and_buy_now_prices'
          dt data-hint="This is our production cost per shirt" class="hint--right" Base Price
          dd class='base_price currency' = @product.base_price
          / dt data-hint="This is the price buyers will pay if they don't want to wait for the sales goal" class="hint--right" Lowest Price
          / dd class='lowest_price currency' = @product.lowest_price

        = f.input :buy_now_price, label: "Retail Price (#{@current_shop.currency_symbol})", input_html: { class: 'currency' }

        = f.input :status, label: "Item Status", collection: [['hidden',1],['visible',2]]
        / = f.input :availability_start, label: "When Do You Want to Begin Your Campaign?", as: :datetime

        / = f.input :campaign_length, collection: [ ['1 day',1], ['3 days',3], ['7 days',7], ['10 days',10], ['15 days',15], ['30 days',30] ]

        = f.submit "Save and Proceed", input_html: { 'data-hint'.to_sym => "Next step: Check this item out on your shop" }     
    div class='totals_and_instructions medium-4 small-12'

      dl class='totals'
        dt Your Profit per Unit
        dd data-hint="You make this much per sale" class='hint--left profit_margin currency' 0
        dt Your Total Earnings at 20 Units
        dd data-hint="You'll earn this much if you sell 20" class="hint--left"
          span class='total_earnings_10 currency' 
        dt Your Total Earnings at 100 Units
        dd data-hint="You'll earn this much if you sell 100" class="hint--left"
          span class='total_earnings_100 currency' 

      div class='help'
        dl class='faq'
          dt
            h3 How does this work?
          dd
            p
              | Just add a name and description for your #{@product.product_type}, set your retail price, and you're good to go! Everytime someone buys your #{@product.product_type}, you'll earn the difference between your retail price and our base price. (If your retail price was 200.00, and our base price was 100.00, you would earn 100.00 per unit sold.)
          dt 
            h3 How much will the #{@product.product_type} be sold for in the marketplace?
          dd
            p 
              | #{app_name} uses a <em>dynamic pricing</em> system. Don't worry, it's really quite simple: basically, if a buyer purchases a large batch of your shirts (for example, 10 or more), they get a small discount. If they chose to buy a hundred shirts, they get a much larger discount. In both cases, the discount won't affect your profit-per-unit, it only affects our base price. You'll make the same profit per unit even if the buyer is enjoying a big discount.
          dt
            h3 But who would buy a hundred units of my #{@product.product_type}?
          dd
            p
              | Some potential buyers would be charities, student organizations, or sports teams. Essentially, anyone who knows they have a fixed number of members that they can give #{@product.product_type}s to.
          

- content_for :page_scripts do
  
  javascript:
    var SHOP = #{@current_shop.to_json.html_safe},
        TYPES = #{App.product_types.to_json.html_safe},
        PRODUCT = #{@product.to_json(methods: [:slug]).html_safe};

    $(function(){
      Calculator.initialize(SHOP, TYPES, PRODUCT);
    });